Ascii: 7비트 데이터에 대한 인코딩 표준
Unicode: 최대 32비트 즉 2^32, 대략 42억개의 표현 가능
Protocol: 규격화된 상호작용에 적용되는 약속
HTTP: 서버 클라이언트의 데이터 교환을 요청과 응답으로 정의한 Protocol

윈도우와 맥에서 사용하는 포트는 0번에서 65535번까지 총 65536개
SSH: 22  HTTP: 80  HTTPS: 443

HTTP Headers 각 줄은 CRLF로 구분되며 첫 줄은 Start Line, 나머지 줄은 Header라고 부른다.
Header는 필드와 값으로 구성되며 HTTP 메세지 도는 바디의 속성을 나타냄.
하나의 HTTP 메세지에는 0개 이상의 Headers가 있을 수 있음.
HTTP 바디는 헤더의 끝을 나타내는 CRLF 뒤 모든 줄을 말한다.
CRLF는 Carriage Return 즉 커서를 현재 중릐 맨 앞으로 이동시키는 문자이고, Line Feed는 커서를 다음 줄로 이동시킨다.
운도우는 CRLF 사용, 유닉스 기반은 LF만 사용.

HTTP 요청의 시작 줄은 Method, Request targer, HTTP 버전으로 구성(각각은 띄어쓰기로 구분)
Method는 요청 대상에 대해 서버가 수행하길 바라는 동작

GET(Method): 리소스를 가져와달라 요청하는 메소드.
이용자가 웹 서버 주소를 입력하거나 링크를 클릭하면, 새로운 페이지를 렌더링하기 위해 리소스가 필요
이때 브라우저는 GET 요청을 서버에 전송하여 리소스를 받으

POST(Method): 요청 대상에게 데이터를 보내는 메소드.
전성할 데이터는 보통 HTTP 바디에 포함.
로그인 사용할 때 입력하는 ID와 Password, 게시판에 작성하는 글 등이 POST로 서버에 보내짐.

HTTP 응답의 시작줄은 HTTP 버전, Status Code, Reason Phrase로 구성(각각은 띄어쓰기로 구분)
HTTP 버전은 서버에서 사용하는 Protocol의 버전.
status code는 요청에 대한 처리 결과를 세 자릿수로 나타냄.
HTTP 표준인 RFc 2616은 대략 40여개의 상태 코드를 정의 하는데, 각각은 첫번째 자릿수에 따라 5개의 클래스로 분류.

1xx: 요청을 제대로 받았으며 처리 진행중.
2xx: 요청이 제대로 처리됨 ex) 200(ok): 성공.
3xx: 요청을 처리하려면, 클라이언트가 추가 동작을 취해야함 ex) 302(Found): 다른 ULR로 갈 것.
4xx: 클라이언트가 잘못된 요청을 보내 처리에 실패 ex) 400(Bad Request): 요청이 문법에 맞지 않음.
                                                 401(Unauthoried): 클라이언트가 요청한 리소스에 대한 인증 실패.
                                                 403(Forbidden): 클라이언트가 리소스에 요청할 권한이 없음.
                                                 404(Not Found): 리소스가 없음.
5xx: 클라이언트의 요청은 유효하지만 서버 에러로 인한 처리 실패 ex) 500(Internal Server Error): 서버가 요청을 처리하다 에러 발생.
                                                              503(service Unavailable): 서버 과부화로 인한 요청 처리 불가.
