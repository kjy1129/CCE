브라우저는 인증 정보로 사용될 수 있는 쿠키를 브라우저 내부에 보관한다.
그리고 이용자가 웹 서비스에 접속할 때, 브라우저는 해당 웹 서비스에서 사용하는 인증 정보인 쿠키를 HTTP 요청에 포함시켜 전달함.
이러한 특징은 사이트에 직접 접속하는 것에만 한정 되는것이 아닌 브라우저는 웹 리소스를 통해 간접적으로 다른 사이트에 접근할 때도 인증 정보인 쿠키를 함께 전송한다.
이 특징 때문에 악의적인 페이지가 클라이언트 권한을 이용해 대상 사이트에 HTTP 요청을 보내고, HTTP 응답 정보를 획득하는 코드를 실행할 수 있다.
이는 정보 유출과 같은 보안 위협이므로, 클라이언트는 가져온 데이터를 악의적인 페이지에서 읽을 수 없도록 해야한다.
그것이 브라우저의 보안 메커니즘인 동일 출처 정책 (Same Origin Policy, SOP)이다.

-SOP의 Origin 구분 방법
오리진은 프로토콜(Protocol, Scheme), 포트(Port), 호스트(Host)로 구성된다.
구성 요소가 모두 일치해야 동일한 오리진이다.
EX) https://same-origin.com/ 라는 오리진과 아래 URL을 비교했을때 결과는 다음과 같다
ULR                                            결과            이유
https://same-origin.com/frame.html            same origin      Path만 다름
http://same-orgin.com/frame.html              cross origin     Scheme가 다름
https://cross.same_origin.com/frame.html      cross origin     Host가 다름
https://same-origin.com:1234/                 cross origin     Port가 다름

웹 서비스에서 동일 출처 정책인 SOP를 완화하여 다른 출처의 데이터를 처리 해야 하는 경우도 있다.
EX) 카페: https://cafe.dreamhack.io
    블로그: https://blog.dreamhack.io
    메일: https://mail.dreamhack.io
    메인: https://dreamhack.io
이러한 예시에서 Host가 다르기 때문에 브라우저는 각 사이트의 오리진이 다르다고 인식함.

하지만 이런 상황에서 이용자가 수신한 메일의 개수를 메인 페이지에 출력하려면 개발자는 메인 페이지에서 메일 서비스에 관련된 리소스를 요청하도록 해야한다. 
이 때, 두 사이트는 오리진이 다르므로 SOP를 적용받지 않고 리소스를 공유할 방법이 필요하다.

이러한 상황에서 자원을 공유하기 위해 사용하는 공유 방법을 교차 출처 리소스 공유 (Cross Origin Resource Sharing, CORS)라고 한다.
교차 출처의 자원을 공유하는 방법은 CORS와 관련된 HTTP 헤더를 추가하여 전송하는 방법을 사용한다.
이 외에도 JSON with Padding (JSONP) 방법을 통해 CORP를 대체할 수 있다.

EX) 웹 리소스 요청 코드
/*
    XMLHttpRequest 객체를 생성합니다. 
    XMLHttpRequest는 웹 브라우저와 웹 서버 간에 데이터 전송을
    도와주는 객체 입니다. 이를 통해 HTTP 요청을 보낼 수 있습니다.
*/
xhr = new XMLHttpRequest();
/* https://theori.io/whoami 페이지에 POST 요청을 보내도록 합니다. */
xhr.open('POST', 'https://theori.io/whoami');
/* HTTP 요청을 보낼 때, 쿠키 정보도 함께 사용하도록 해줍니다. */
xhr.withCredentials = true;
/* HTTP Body를 JSON 형태로 보낼 것이라고 수신측에 알려줍니다. */
xhr.setRequestHeader('Content-Type', 'application/json');
/* xhr 객체를 통해 HTTP 요청을 실행합니다. */
xhr.send("{'data':'WhoAmI'}");

EX) 발신 측의 HTTP 요청
OPTIONS /whoami HTTP/1.1
Host: theori.io
Connection: keep-alive
Access-Control-Request-Method: POST
Access-Control-Request-Headers: content-type
Origin: https://dreamhack.io
Accept: */*
Referer: https://dreamhack.io/

