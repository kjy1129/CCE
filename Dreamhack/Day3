-devtools-sources 문제
문제에 개발자 도구의 Sources 기능을 이용해 플래그를 찾아보라는 언급이 있으며, 플래그의 형식은 DH{...}임.
Sources 탭에서 Ctrl+Shift+F 를 통해 모든 파일에 대해 검색할 수 있음.
DH 문자열을 검색하면 main.scss에서 플래그를 확인 가능함.

Webpack은 웹에서 사용되는 에셋을 번들링해주는 모듈 번들러다.
웹을 개발하는 과정에서, 개발자는 js, css 등 다양한 에셋 파일을 작성하거나 사용하게 됨.
웹 페이지를 로드하기 위해서는 해당 파일을 모두 로드할 필요가 있는데. 이 과정에서 오랜 시간 소모되는 문제를 해결하기 위해 등장한 기술이 번들러다.
Webpack과 같은 번들러는 개발자가 사용하고 있는 에셋을 하나의 파일로 처리 및 병합한 뒤 압축하여, 페이지 로드에 필요한 에셋들을 신속하게 보낼 수 있게 가공한다.
실제로 .map 파일, Chrome 브라우저에서 보았던 webpack:// 등을 퐁해 Webpack이 사용된 흔적을 확인할 수 있다.

Sourcemap 을 이용하면, 파일을 병합하고 압축하는 과정에서 함수 및 변수명, 라인 정보등의 정보가 소실된다.
하지만 이는 개발자가 페이지를 디버깅하고자 할 때 어려움이 생길 수 있기에 등장한 개념이 Sourcemap이다.
Sourcemap이란 원본 에셋 파일과 변환된 파일 사이의 매핑 정보를 담고있는 파일이다.
브라우저는 해당 파일을 얽고 변환된 파일의 각 부분에 대응되는 파일을 찾을 수 있게 되며, 이 정보를 개발자에게 보여준다.
내부에 존재하는 .map 파일이 Sourcemap에 해당하며 Chrome의 경우 해당 파일을 읽은 뒤 적절하게 파싱 작업을 거친 후 내부에 존재라는 파일을 webpack:// 하위에 보여준것.

클라이언트의 IP 주소와 User-Agent는 매번 변경될 수 있는 고유하지 않은 정보이며, HTTP 프로토콜의 Connectionless와 Stateless 측징 때문에 웹 서버는 클라이언트를 기억할 수 없다.
Connectionless: 하나의 요청에 하나의 응답을 한 후 연결을 종료하는 것.
Stateless: 통신이 끝난 후 상태 정보를 저장하지 않음.
이러한 특성으로 HTTP에서 상태를 유지하기 위해 Cookie가 탄생하게됨.
Cookie는 Key와 Value로 이뤄진 일종의 단위로, 서버가 클라이언트에게 쿠기를 발급하면, 클라이언트는 서버에 요청을 보낼 때 마다 쿠키를 같이 전송함.

웹 통신에서 클라이언트가 쿠키를 변조해 서버에 요청을 보낼 수 있다.
그렇기에 쿠키에 인증 상태를 저장하지만 클라이언트가 인증 정보를 변조할 수 없게 하기 위해 Session을 사용한다.
Session 은 인증 정보를 서버에 저장하고 해당 데이터에 접근할 수 있는 Key를 만들어 클라이언트에 전달하는 방식으로 작동한다.
이러한 Key를 일반적으로 Session ID라고 한다.

Cookie는 클라이언트에 저장되기 때문에 클리이언트는 저장된 쿠키를 조회, 수정, 추가할 수 있다.
클라이언트가 서버에 요청을 보낼때 저장된 쿠키를 요청 헤더에 넣어 전송하기에 이용자가 요청을 보낼 때 쿠키 헤더를 변조할 수 있다.

-Cookie 설정
Server: HTTP 응답 중 헤더에 쿠키 설정 헤더 (SEt-Cookie)를 추가하면 클라이언트의 브라우저가 쿠키를 설정함.
EX)  1. HTTP/1.1 200 OK
     2. Server: Apache/2.4.29 (Ubuntu)
     3. Set-Cookie: "name=test;"
     4. Set-Cookie: age=30; Expires=Fri, 30 sep 2022 14:54:50 GMT;

Client: 자바 스크립트를 사용해 쿠키를 설정함.
EX)  1. documnet.cookie = "name=test;"
     2. document.cookie = "age=30; Expires=Fri, 30 sep 2022 14:54:50 GMT;"

